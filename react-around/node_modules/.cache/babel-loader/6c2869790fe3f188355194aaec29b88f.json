{"ast":null,"code":"var _jsxFileName = \"/home/quinn/Projects/GoAround/react-around/src/components/CreatePostButton.js\";\nimport React from 'react';\nimport { Modal, Button, message } from 'antd';\nimport { CreatePostForm } from './CreatePostForm';\nimport { API_ROOT, AUTH_HEADER, TOKEN_KEY, POS_KEY, LOC_SHAKE, TOPIC_AROUND } from '../constants';\nexport class CreatePostButton extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      visible: false,\n      confirmLoading: false\n    };\n\n    this.showModal = () => {\n      this.setState({\n        visible: true\n      });\n    };\n\n    this.handleOk = () => {\n      this.form.validateFields((err, values) => {\n        console.log(values);\n\n        if (!err) {\n          const token = localStorage.getItem(TOKEN_KEY);\n          const {\n            lat,\n            lon\n          } = JSON.parse(localStorage.getItem(POS_KEY));\n          const formData = new FormData();\n          formData.set('lat', lat + Math.random() * LOC_SHAKE * 2 - LOC_SHAKE);\n          formData.set('lon', lon + Math.random() * LOC_SHAKE * 2 - LOC_SHAKE);\n          formData.set('message', values.message);\n          formData.set('image', values.image[0].originFileObj);\n          this.setState({\n            confirmLoading: true\n          });\n          fetch(`${API_ROOT}/post`, {\n            method: 'POST',\n            headers: {\n              Authorization: `${AUTH_HEADER} ${token}`\n            },\n            body: formData\n          }).then(response => {\n            if (response.ok) {\n              return this.props.loadPostsByTopic();\n            }\n\n            throw new Error('Failed to create post.');\n          }).then(() => {\n            this.setState({\n              visible: false,\n              confirmLoading: false\n            });\n            this.form.resetFields();\n            message.success('Post created successfully!');\n          }).catch(e => {\n            console.error(e);\n            message.error('Failed to create post.');\n            this.setState({\n              confirmLoading: false\n            });\n          });\n        }\n      });\n    };\n\n    this.handleCancel = () => {\n      console.log('Clicked cancel button');\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.getFormRef = formInstance => {\n      this.form = formInstance;\n    };\n  }\n\n  render() {\n    const {\n      visible,\n      confirmLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.showModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, \"Create New Post\"), /*#__PURE__*/React.createElement(Modal, {\n      title: \"Create New Post\",\n      visible: visible,\n      onOk: this.handleOk,\n      okText: \"Create\",\n      confirmLoading: confirmLoading,\n      onCancel: this.handleCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CreatePostForm, {\n      ref: this.getFormRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/home/quinn/Projects/GoAround/react-around/src/components/CreatePostButton.js"],"names":["React","Modal","Button","message","CreatePostForm","API_ROOT","AUTH_HEADER","TOKEN_KEY","POS_KEY","LOC_SHAKE","TOPIC_AROUND","CreatePostButton","Component","state","visible","confirmLoading","showModal","setState","handleOk","form","validateFields","err","values","console","log","token","localStorage","getItem","lat","lon","JSON","parse","formData","FormData","set","Math","random","image","originFileObj","fetch","method","headers","Authorization","body","then","response","ok","props","loadPostsByTopic","Error","resetFields","success","catch","e","error","handleCancel","getFormRef","formInstance","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Modal, Button, message } from 'antd';\nimport { CreatePostForm } from './CreatePostForm';\nimport { API_ROOT, AUTH_HEADER, TOKEN_KEY, POS_KEY, LOC_SHAKE, TOPIC_AROUND } from '../constants';\n\nexport class CreatePostButton extends React.Component {\n  state = {\n    visible: false,\n    confirmLoading: false,\n  };\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  handleOk = () => {\n    this.form.validateFields((err, values) => {\n      console.log(values);\n      if (!err) {\n        const token = localStorage.getItem(TOKEN_KEY);\n        const { lat, lon } = JSON.parse(localStorage.getItem(POS_KEY));\n\n        const formData = new FormData();\n        formData.set('lat', lat + Math.random() * LOC_SHAKE * 2 - LOC_SHAKE);\n        formData.set('lon', lon + Math.random() * LOC_SHAKE * 2 - LOC_SHAKE);\n        formData.set('message', values.message);\n        formData.set('image', values.image[0].originFileObj);\n\n        this.setState({ confirmLoading: true });\n        fetch(`${API_ROOT}/post`, {\n          method: 'POST',\n          headers: {\n            Authorization: `${AUTH_HEADER} ${token}`\n          },\n          body: formData,\n        })\n          .then((response) => {\n            if (response.ok) {\n              return this.props.loadPostsByTopic();\n            }\n            throw new Error('Failed to create post.');\n          })\n          .then(() => {\n            this.setState({ visible: false, confirmLoading: false });\n            this.form.resetFields();\n            message.success('Post created successfully!');\n          })\n          .catch((e) => {\n            console.error(e);\n            message.error('Failed to create post.');\n            this.setState({ confirmLoading: false });\n          });\n      }\n    });\n  };\n\n  handleCancel = () => {\n    console.log('Clicked cancel button');\n    this.setState({\n      visible: false,\n    });\n  };\n\n  getFormRef = (formInstance) => {\n    this.form = formInstance;\n  }\n\n  render() {\n    const { visible, confirmLoading } = this.state;\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>\n          Create New Post\n        </Button>\n        <Modal\n          title=\"Create New Post\"\n          visible={visible}\n          onOk={this.handleOk}\n          okText='Create'\n          confirmLoading={confirmLoading}\n          onCancel={this.handleCancel}\n        >\n          <CreatePostForm ref={this.getFormRef}/>\n        </Modal>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}